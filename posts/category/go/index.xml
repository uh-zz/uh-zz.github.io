<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on small land</title><link>https://uh-zz.github.io/posts/category/go/</link><description>Recent content in Go on small land</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 05 May 2022 18:52:33 +0900</lastBuildDate><atom:link href="https://uh-zz.github.io/posts/category/go/index.xml" rel="self" type="application/rss+xml"/><item><title>netパッケージで非推奨のTemporaryメソッドの扱いについて</title><link>https://uh-zz.github.io/posts/category/go/2022/12/kyash-advent-calendar/</link><pubDate>Tue, 13 Dec 2022 00:00:00 +0900</pubDate><guid>https://uh-zz.github.io/posts/category/go/2022/12/kyash-advent-calendar/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>こちらは&lt;a href="https://adventar.org/calendars/7407" target="_blank" rel="noopener">Kyash Advent Calendar 2022&lt;/a> の 13 日目の記事です。&lt;/p>
&lt;p>今年の 11 月に Kyash に入社しました！サーバサイドチームの&lt;a href="https://twitter.com/_uhzz_" target="_blank" rel="noopener">uehara&lt;/a>です&amp;#x1f44b;&lt;/p>
&lt;p>今回は&lt;code>net/http&lt;/code>パッケージの非推奨メソッドである&lt;code>Temporary()&lt;/code>について、社のメンバーから知見を共有してもらったのでその話をします。&lt;/p>
&lt;h2 id="nethttp-パッケージの-非推奨メソッド-temporary-について">net/http パッケージの 非推奨メソッド Temporary() について&lt;/h2>
&lt;p>&lt;code>Temporary()&lt;/code>については、フューチャー社の記事にわかりやすくまとめられています。&lt;/p>
&lt;p>&lt;a href="https://future-architect.github.io/articles/20220203a/" target="_blank" rel="noopener">https://future-architect.github.io/articles/20220203a/&lt;/a>&lt;/p>
&lt;p>上記の記事を踏まえて、ここでは非推奨になった経緯と対応について言及しようと思います。&lt;/p>
&lt;p>サッと概要を話すと、&lt;code>Temporary()&lt;/code>は&lt;code>net.Error&lt;/code>インターフェースに定義されているメソッドで、一時的なエラーかどうか判定するために用意されています。
ただし、「一時的」というのがうまく定義されていないとの理由で、こちらのメソッドは Go1.18 で非推奨になりました。&lt;/p>
&lt;blockquote>
&lt;p>net.Error.Temporary has been deprecated.
&lt;a href="https://tip.golang.org/doc/go1.18" target="_blank" rel="noopener">https://tip.golang.org/doc/go1.18&lt;/a>&lt;/p>&lt;/blockquote>
&lt;h2 id="temporaryが非推奨になった経緯">Temporary()が非推奨になった経緯&lt;/h2>
&lt;p>前提として、&lt;code>net.Error&lt;/code>インターフェースは、以下のように定義されています
※ソースは Go 1.19 です&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">// An Error represents a network error.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Error&lt;/span> &lt;span style="color:#66d9ef">interface&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">error&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Timeout&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span> &lt;span style="color:#75715e">// Is the error a timeout?&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Deprecated: Temporary errors are not well-defined.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Most &amp;#34;temporary&amp;#34; errors are timeouts, and the few exceptions are surprising.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// Do not use this method.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Temporary&lt;/span>() &lt;span style="color:#66d9ef">bool&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>非推奨になったときの issue を追ってみます&lt;/p></description></item><item><title>Futureパターンが使われているOSSを見てみた</title><link>https://uh-zz.github.io/posts/category/go/2022/12/qiita-advent-calender/</link><pubDate>Sat, 10 Dec 2022 18:07:06 +0900</pubDate><guid>https://uh-zz.github.io/posts/category/go/2022/12/qiita-advent-calender/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/_uhzz_" target="_blank" rel="noopener">@uh-zz&lt;/a>です！&lt;/p>
&lt;p>この記事は、&lt;a href="https://qiita.com/advent-calendar/2022/go" target="_blank" rel="noopener">Go Advent Calendar 2022&lt;/a>の 10 日目の記事になります！&lt;/p>
&lt;p>今年は、個人的に色々なことに挑戦した年だったなあと振り返るとともに、去年のアドベントカレンダーからもう１年経つのか〜という気持ちです&lt;/p>
&lt;p>この記事では、Go における Future パターンをご紹介できればと思います&lt;/p>
&lt;h2 id="future-パターンとは">Future パターンとは&lt;/h2>
&lt;blockquote>
&lt;p>あるメソッドを呼び出すとします。 もしもオブジェクトが、そのメソッドを実行できる状態なら、実行します。 でも、実行できない状態なら、将来実行できる状態になるまで待つようにしたいとします。 その時に使えるのがこの Future パターンです。 future は「未来」という意味です&lt;/p>
&lt;p>もう少し正確にお話しましょう。 単にあるクラスに 「実行できる状態になるまで待つ」 という機能を入れるわけではありません。 すでに存在しているクラスに一皮かぶせて、 「実行できる状態になるまで待てるような機能を追加する」 というのが Future パターンです。&lt;/p>
&lt;p>出典: &lt;a href="https://www.hyuki.com/dp/dpinfo.html#Future" target="_blank" rel="noopener">結城浩, Future パターン, デザインパターン紹介&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>上記の参考記事内では、Java をつかったマルチスレッドプログラミングで Future パターンが実装されています。&lt;/p>
&lt;p>引用箇所の説明がほぼすべてですが、イメージ図で補足するとこんな感じになります&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-mermaid" data-lang="mermaid">flowchart LR
呼び出し元 --&amp;gt; Futureメソッド -- 実行できるようになるまで待つ --&amp;gt; 処理するメソッド
&lt;/code>&lt;/pre>&lt;p>呼び出し元と処理するメソッドの間に Future メソッドを挟むことで、Future メソッドがプロキシ的に働き、非同期的に処理するメソッドを実行できるようになっています。&lt;/p>
&lt;h2 id="go-だとこんなかんじにかけるらしい">Go だとこんなかんじにかけるらしい&lt;/h2>
&lt;p>以下の記事で &lt;code>Future/Promise&lt;/code>という説明書されています&lt;/p>
&lt;p>&lt;a href="https://ascii.jp/elem/000/001/486/1486902/" target="_blank" rel="noopener">https://ascii.jp/elem/000/001/486/1486902/&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">readFile&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// ファイルを読み込み、その結果を返すFutureを返す&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">promise&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// readFile とは別のゴルーチンでファイルを読み出す&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">content&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">os&lt;/span>.&lt;span style="color:#a6e22e">ReadFile&lt;/span>(&lt;span style="color:#a6e22e">path&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;read error %s\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>.&lt;span style="color:#a6e22e">Error&lt;/span>())
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close(&lt;span style="color:#a6e22e">promise&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> } &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 約束を果たした&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">promise&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> string(&lt;span style="color:#a6e22e">content&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">promise&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">printFunc&lt;/span>(&lt;span style="color:#a6e22e">futureSource&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#66d9ef">chan&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 文字列中の関数一覧を返すFutureを返す&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">promise&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// printFunc とは別のゴルーチンで文字列操作する&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#66d9ef">func&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">var&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span> []&lt;span style="color:#66d9ef">string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// futureSource は readFile で読みだしたファイルの中身です&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// readFile(ファイル読み込み)が完了して、 futureSource(=promise) に&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 中身が送信されるまでこの処理は実行されません&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">line&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#66d9ef">range&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Split&lt;/span>(&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">futureSource&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">HasPrefix&lt;/span>(&lt;span style="color:#a6e22e">line&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;func &amp;#34;&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">result&lt;/span> = append(&lt;span style="color:#a6e22e">result&lt;/span>, &lt;span style="color:#a6e22e">line&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 約束を果たした&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">promise&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">result&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">promise&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">futureSource&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">readFile&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;future_promise.go&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// 一見、 readFile が実行されたあとに、すぐ printFunc が実行されるように見えます&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// しかし、 printFunc の引数(futureSource)がチャネルになっているので、&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// futureSourceが値を受信するまで関数内で、futureSource を使うことができない&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">//&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// よって関数内で実行待ちが発生します&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">futureFuncs&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">printFunc&lt;/span>(&lt;span style="color:#a6e22e">futureSource&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// チャネル(futureFuncs)を受信するまでブロック&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">strings&lt;/span>.&lt;span style="color:#a6e22e">Join&lt;/span>(&lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">futureFuncs&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;\n&amp;#34;&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>※記事内にあるコードに、コメントを追記させていただきました。&amp;#x1f64f;&lt;/p></description></item><item><title>球面三角法による２点間の距離計算をGoで実装してみた</title><link>https://uh-zz.github.io/posts/category/go/2020/07/spherical-trigonometry/</link><pubDate>Mon, 06 Jul 2020 18:07:06 +0900</pubDate><guid>https://uh-zz.github.io/posts/category/go/2020/07/spherical-trigonometry/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>バックエンドエンジニアの&lt;a href="https://github.com/kamranahmedse/developer-roadmap#back-end-roadmap" target="_blank" rel="noopener">ロードマップ&lt;/a>に沿ってエンジニアとしての自己肯定感を養うシリーズです。&lt;/p>
&lt;p>地球上の２点間の距離計算ってアプリだと Google Map API を使えば完了！だと思いますが、どう計算してるかって気になりますよね？&lt;/p>
&lt;p>今回は球面三角法を利用した地球上の２点間の距離計算を Go で実装します。（調べたらフツーにあるんですが）&lt;/p>
&lt;h2 id="球面三角法とは">球面三角法とは&lt;/h2>
&lt;p>その名の通り、三角関数を利用して球面上の辺や角の大きさを導出するものです。平面と球面とでの違いは辺の大きさが
球面では中心角によって表されることにあります。&lt;/p>
&lt;p>よって、球面三角法を使用して算出した弧の長さ(中心角)と赤道の半径を乗算すると距離が求まります。&lt;/p>
&lt;p>球面三角法の証明については、&lt;a href="http://horibe.jp/PDFBOX/SphericalTriangles.pdf" target="_blank" rel="noopener">球面三角形の定理&lt;/a>を参考にしました！&lt;/p>
&lt;p>(&amp;ldquo;高校生に向けて&amp;quot;とある通り、非常にわかりやすかったです)&lt;/p>
&lt;p>球面三角法の余弦定理を利用して実際に距離を算出する方法は&lt;a href="https://qiita.com/port-development/items/eea3a0a225be47db0fd4#%E7%90%83%E9%9D%A2%E4%B8%89%E8%A7%92%E6%B3%95%E3%81%AE%E4%BD%99%E5%BC%A6%E5%AE%9A%E7%90%86" target="_blank" rel="noopener">球面三角法の余弦定理&lt;/a>がわかりやすいです。&lt;/p>
&lt;h2 id="実装">実装&lt;/h2>
&lt;p>実装したソースコードは Github でも確認できます。&lt;/p>
&lt;p>&lt;a href="https://github.com/uh-zz/traning/tree/master/algorithm/distance" target="_blank" rel="noopener">球面三角法を利用した２点間の距離計算&lt;/a>&lt;/p>
&lt;pre tabindex="0">&lt;code>package main
import &amp;#34;math&amp;#34;
// Coordinate 緯度経度
type Coordinate struct {
Longitude float64
Latitude float64
}
// EarthRadius 赤道半径
const EarthRadius = 6378140
// DistanceOnTheEarth 地球上の 2 点間の距離を出す（球面三角法）
func DistanceOnTheEarth(from, to Coordinate) float64 {
fromLadLon := from.Longitude * math.Pi / 180
fromLadLat := from.Latitude * math.Pi / 180
toLadLon := to.Longitude * math.Pi / 180
toLadLat := to.Latitude * math.Pi / 180
alpha := math.Sin(fromLadLat)*math.Sin(toLadLat) +
math.Cos(fromLadLat)*math.Cos(toLadLat)*math.Cos(fromLadLon-toLadLon)
arcAlpha := math.Acos(alpha)
return arcAlpha * EarthRadius / 1000
}
&lt;/code>&lt;/pre>&lt;h2 id="動かしてみる">動かしてみる&lt;/h2>
&lt;p>それでは実装した Go の関数を呼び出す簡単なアプリを動かしていきます。&lt;/p></description></item><item><title>ソートアルゴリズムをGoで実装してみた</title><link>https://uh-zz.github.io/posts/category/go/2020/07/compare-sort-aligorithm/</link><pubDate>Sun, 05 Jul 2020 18:07:06 +0900</pubDate><guid>https://uh-zz.github.io/posts/category/go/2020/07/compare-sort-aligorithm/</guid><description>&lt;h2 id="はじめに">はじめに&lt;/h2>
&lt;p>バックエンドエンジニアの&lt;a href="https://github.com/kamranahmedse/developer-roadmap#back-end-roadmap" target="_blank" rel="noopener">ロードマップ&lt;/a>に沿ってエンジニアとしての自己肯定感を養うシリーズです。&lt;/p>
&lt;h2 id="マージソート">マージソート&lt;/h2>
&lt;blockquote>
&lt;p>マージソートは、ソートのアルゴリズムで、既に整列してある複数個の列を 1 個の列にマージする際に、小さいものから先に新しい列に並べれば、新しい列も整列されている、というボトムアップの分割統治法による。大きい列を多数の列に分割し、そのそれぞれをマージする作業は並列化できる。&lt;/p>
&lt;p>出典：&lt;a href="https://ja.wikipedia.org/wiki/%E3%83%9E%E3%83%BC%E3%82%B8%E3%82%BD%E3%83%BC%E3%83%88#:~:text=%E3%83%9E%E3%83%BC%E3%82%B8%E3%82%BD%E3%83%BC%E3%83%88%E3%81%AF%E3%80%81%E3%82%BD%E3%83%BC%E3%83%88%E3%81%AE,%E4%BD%9C%E6%A5%AD%E3%81%AF%E4%B8%A6%E5%88%97%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B%E3%80%82" target="_blank" rel="noopener">wikipedia「マージソート」より引用&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>最悪の計算量が O(n log n) であるから少なくとも O(n^2)よりは速いんだろうなという印象（雑すぎるか）&lt;/p>
&lt;p>以下「&lt;a href="https://qiita.com/drken/items/44c60118ab3703f7727f" target="_blank" rel="noopener">ソートを極める！ 〜 なぜソートを学ぶのか 〜&lt;/a>」を元に実装してみた（なるべくソースを見ないで実装を試みたがマージする箇所は折れた、、）&lt;/p>
&lt;pre tabindex="0">&lt;code>package main
import (
&amp;#34;fmt&amp;#34;
&amp;#34;time&amp;#34;
&amp;#34;github.com/uh-zz/traning/algorithm/shuffle&amp;#34;
)
func main() {
// ランダムな要素 n 個のスライス取得
input := shuffle.RandomIntList(n)
inputLength := len(input)
// マージソート
MergeSort(&amp;amp;input, 0, inputLength)
}
// MergeSort マージソート
func MergeSort(input \*[]int, left, right int) {
// 要素数1つの場合は抜ける
if right-left == 1 {
return
}
// 配列を２つに分けるインデックス
middle := left + (right-left)/2
// 配列左側
MergeSort(input, left, middle)
// 配列右側
MergeSort(input, middle, right)
var buffer []int
// 左側と右側をバッファにためる（右側反転）
for index := left; index &amp;lt; middle; index++ {
buffer = append(buffer, (*input)[index])
}
for index := right - 1; index &amp;gt;= middle; index-- {
buffer = append(buffer, (*input)[index])
}
// マージする
scopeLeft := 0
scopeRight := len(buffer) - 1
for index := left; index &amp;lt; right; index++ {
if buffer[scopeLeft] &amp;lt;= buffer[scopeRight] {
// 左側採用
(*input)[index] = buffer[scopeLeft]
scopeLeft++
} else {
// 右側採用
(*input)[index] = buffer[scopeRight]
scopeRight--
}
}
}
&lt;/code>&lt;/pre>&lt;p>これ考えたのぶっ飛んでるなあと思って Wikipedia 見てたら、考案者が&lt;a href="https://ja.wikipedia.org/wiki/%E3%82%B8%E3%83%A7%E3%83%B3%E3%83%BB%E3%83%95%E3%82%A9%E3%83%B3%E3%83%BB%E3%83%8E%E3%82%A4%E3%83%9E%E3%83%B3" target="_blank" rel="noopener">フォン・ノイマン&lt;/a>でやっぱりぶっ飛んでた（凄すぎ）&lt;/p></description></item></channel></rss>