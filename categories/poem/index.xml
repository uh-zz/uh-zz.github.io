<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Poem on small land</title><link>https://uh-zz.github.io/categories/poem/</link><description>Recent content in Poem on small land</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 05 Mar 2021 18:07:06 +0900</lastBuildDate><atom:link href="https://uh-zz.github.io/categories/poem/index.xml" rel="self" type="application/rss+xml"/><item><title>達人プログラマーとは</title><link>https://uh-zz.github.io/posts/category/development/2021/03/pragmatic-programmer/</link><pubDate>Fri, 05 Mar 2021 18:07:06 +0900</pubDate><guid>https://uh-zz.github.io/posts/category/development/2021/03/pragmatic-programmer/</guid><description>&lt;h2 id="はじめに"&gt;はじめに&lt;/h2&gt;
&lt;p&gt;エンジニアとしてコードを書くようになって、もうすぐ２年というタイミングに差し掛かりました&lt;/p&gt;
&lt;p&gt;心境の変化としては、がむしゃらに毎日のタスクを通して「動く」コードを書くことから、メンテナンスしやすいコードを意識することが多くなりました&lt;/p&gt;
&lt;p&gt;「達人プログラマー」は、プログラマとして次のステップを踏み出そうというときにベストな一冊となっています&lt;/p&gt;
&lt;h2 id="達人の哲学"&gt;達人の哲学&lt;/h2&gt;
&lt;p&gt;ソフトウェアのエントロピーの話は心当たりがありすぎた&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;エントロピー&lt;/strong&gt; とは、物理学の用語で「ある系における無秩序の度合い」のことで、
時間が経つたびにエントロピーは増大していく&lt;/p&gt;
&lt;p&gt;ソフトウェアも同様に、時間が経つたびに無秩序になっていく&lt;/p&gt;
&lt;p&gt;これを &lt;strong&gt;割れ窓理論&lt;/strong&gt; というメカニズムで説明していたのもわかりやすかった&lt;/p&gt;
&lt;p&gt;窓が１枚割れているのを長期間放置しておくと、それをメンテナンスする気力もなくなるマインドが
植え付けられて、最終的には建物全体が破壊されていく&lt;/p&gt;
&lt;p&gt;ソフトウェアではこれを、悪い設計、誤った意思決定、質の悪いコードに見立てることができて、
放置しておくと潜在的なバグを生み出すことになりかねない&lt;/p&gt;
&lt;p&gt;こういった「割れた窓」を発見したと同時に速やかに修復するべきだ、そして時間がなくてもコメントを
残すといった何らかのアクションをしてくださいと言った主張だった&lt;/p&gt;
&lt;p&gt;茹でガエルの話は、ある程度精神的に余裕がないと気づくことが難しいと感じた&lt;/p&gt;
&lt;p&gt;あっつあつの熱湯にカエルを放り込むとびっくりして飛び出してくるが、
常温の水にカエルを入れて段々と温度をあげていくと、カエルは気づかないまま茹で上がると言った話&lt;/p&gt;
&lt;p&gt;要するに、いつも&lt;strong&gt;メタ認知&lt;/strong&gt;を意識して行動しようということ&lt;/p&gt;
&lt;p&gt;これは仕事に限らずしていきたい&lt;/p&gt;
&lt;h2 id="達人のアプローチ"&gt;達人のアプローチ&lt;/h2&gt;
&lt;p&gt;章前半の&lt;strong&gt;DRY 原則&lt;/strong&gt;については膝を叩いて同意できるといった実感があった&lt;/p&gt;
&lt;p&gt;また、曳光弾の考え方については目からウロコだった&lt;/p&gt;
&lt;p&gt;複雑なシステムを構築していくときに、各機能を一つずつ作り込んでいくのではなく、各機能を最低限使えるようにするシンプルな箇所を探していくといった手法&lt;/p&gt;
&lt;p&gt;シンプルな箇所に最初に取り組んでその他は後回しにする（未実装）というのは初心者視点では至らないと感じた&lt;/p&gt;
&lt;p&gt;章後半のプロトタイプ、見積もりの話は現実でも問われることがあるものの、
実際に見積もりが大きく外れるような難しい設計をした経験がないということもあって実感が持てなかった&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;「言語の制約はそれを使う人の世界を制限する」 - ヴィトゲンシュタイン&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;毎回トピックの初めに、名言があってモチベーションが上がる&lt;/p&gt;
&lt;p&gt;プログラミング言語に限らず、日常使っている日本語にも問題に対する考え方や
コミュニケーションに対する考え方に影響を及ぼしているという構造主義的な話もあって興味深い&lt;/p&gt;
&lt;h2 id="基本的なツール"&gt;基本的なツール&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;「悩んでいる君、そしてその悩みの原因は他の誰でもない、君自身によるものだ」
ということを知るのはつらいものだ&lt;/p&gt;
&lt;p&gt;- ソフォクレス&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;デバッグの最初の心構え → &lt;strong&gt;「パニクるな」&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id="妄想の達人"&gt;妄想の達人&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;契約プログラミング(DbC)&lt;/strong&gt; は素晴らしい&lt;/p&gt;
&lt;p&gt;仕様を記述(契約)しておくことで、プログラマにバグになりかねないようなことをさせないプログラミングをする&lt;/p&gt;
&lt;p&gt;トラッシュ（メチャクチャ）にするのではなく、クラッシュ（停止）させる&lt;/p&gt;
&lt;p&gt;Go の&lt;code&gt;if err != nil&lt;/code&gt;で毎回エラーチェックしてるのはこれに則っているのかなと思った。&lt;/p&gt;
&lt;p&gt;確かに&lt;code&gt;catch&lt;/code&gt;で新しいエラーがくるたびに分類するのは怠い気もするかな、、&lt;/p&gt;
&lt;h2 id="柳に雪折れなし"&gt;柳に雪折れなし&lt;/h2&gt;
&lt;p&gt;列車の衝突事故を例にして依存をわかりやすく説明している&lt;/p&gt;
&lt;p&gt;１つのメソッドであまりにも多くのことをやろうとすると、
連結されている全ての車両に影響が及ぶように、メソッドと属性が影響を受ける&lt;/p&gt;
&lt;p&gt;例)割引料金を算出するメソッドの中で、これらの操作を行う。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顧客の注文履歴を参照する&lt;/li&gt;
&lt;li&gt;注文履歴から特定の注文オブジェクトを取得する&lt;/li&gt;
&lt;li&gt;注文オブジェクトの総額を返す&lt;/li&gt;
&lt;li&gt;総額から割引した値をオブジェクトにセットする&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;次のような考え方がある&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;照会せずに依頼する
TDA(Tell, Don&amp;rsquo;t Ask)&lt;/p&gt;</description></item></channel></rss>